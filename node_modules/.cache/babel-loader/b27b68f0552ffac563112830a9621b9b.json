{"ast":null,"code":"const axios = require('axios');\n\nconst cache = require('memory-cache');\n\nconst _require = require('./default.js'),\n      values = _require.values;\n\nconst _require2 = require('./error.js'),\n      handleError = _require2.handleError;\n\nlet options = {\n  baseURL: \"\".concat(values.protocol).concat(values.hostName, \"/\"),\n  timeout: values.timeout\n};\n\nexports.getJSON = async (url, cb) => {\n  try {\n    // retrive possible content from volatile memory\n    const cachedResult = cache.get(url);\n\n    if (cachedResult !== null) {\n      if (cb) {\n        // call callback without errors\n        cb(cachedResult, false);\n      }\n\n      return cachedResult;\n    } else {\n      response = await axios.get(url, options); // if there is an error\n\n      if (response.statusCode !== undefined && response.statusCode !== 200) {\n        handleError(response, cb);\n      } else {\n        // if everything was good\n        // cache the object in volatile memory\n        // only if cacheLimit > 0\n        response = response.data;\n\n        if (values.cacheLimit > 0) {\n          cache.put(url, response, values.cacheLimit);\n        } // if a callback is present\n\n\n        if (cb) {\n          // call it, without errors\n          cb(response, false);\n        } else {\n          return response;\n        }\n      }\n    }\n  } catch (error) {\n    handleError(error, cb);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}