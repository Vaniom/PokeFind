{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/florentpianet/Documents/React/pokefind/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/florentpianet/Documents/React/pokefind/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar axios = require('axios');\n\nvar cache = require('memory-cache');\n\nvar _require = require('./default.js'),\n    values = _require.values;\n\nvar _require2 = require('./error.js'),\n    handleError = _require2.handleError;\n\nvar options = {\n  baseURL: \"\".concat(values.protocol).concat(values.hostName, \"/\"),\n  timeout: values.timeout\n};\n\nexports.getJSON =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(url, cb) {\n    var cachedResult;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            // retrive possible content from volatile memory\n            cachedResult = cache.get(url);\n\n            if (!(cachedResult !== null)) {\n              _context.next = 7;\n              break;\n            }\n\n            if (cb) {\n              // call callback without errors\n              cb(cachedResult, false);\n            }\n\n            return _context.abrupt(\"return\", cachedResult);\n\n          case 7:\n            _context.next = 9;\n            return axios.get(url, options);\n\n          case 9:\n            response = _context.sent;\n\n            if (!(response.statusCode !== undefined && response.statusCode !== 200)) {\n              _context.next = 14;\n              break;\n            }\n\n            handleError(response, cb);\n            _context.next = 21;\n            break;\n\n          case 14:\n            // if everything was good\n            // cache the object in volatile memory\n            // only if cacheLimit > 0\n            response = response.data;\n\n            if (values.cacheLimit > 0) {\n              cache.put(url, response, values.cacheLimit);\n            } // if a callback is present\n\n\n            if (!cb) {\n              _context.next = 20;\n              break;\n            }\n\n            // call it, without errors\n            cb(response, false);\n            _context.next = 21;\n            break;\n\n          case 20:\n            return _context.abrupt(\"return\", response);\n\n          case 21:\n            _context.next = 26;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](0);\n            handleError(_context.t0, cb);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 23]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}