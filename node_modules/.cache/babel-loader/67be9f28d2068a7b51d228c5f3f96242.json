{"ast":null,"code":"const pMap = require('p-map');\n\nconst _require = require('./endpoints.js'),\n      endpoints = _require.endpoints;\n\nconst _require2 = require('./rootEndpoints.js'),\n      rootEndpoints = _require2.rootEndpoints;\n\nconst _require3 = require('./getter.js'),\n      getJSON = _require3.getJSON;\n\nconst _require4 = require('./default.js'),\n      values = _require4.values;\n\nconst configurator = require('./configurator.js');\n\nconst _require5 = require('./error.js'),\n      handleError = _require5.handleError;\n\nclass Pokedex {\n  constructor(config) {\n    configurator.setPokedexConfiguration(config); // add to Pokedex.prototype all our endpoint functions\n\n    endpoints.forEach(endpoint => {\n      this[endpoint[0]] = async (input, cb) => {\n        try {\n          const mapper = async name => {\n            const queryRes = await getJSON(\"\".concat(values.protocol).concat(values.hostName).concat(values.versionPath).concat(endpoint[1], \"/\").concat(name, \"/\"));\n            return queryRes;\n          };\n\n          if (input) {\n            // if the user has submitted a Name or an Id, return the Json promise\n            if (typeof input === 'number' || typeof input === 'string') {\n              return getJSON(\"\".concat(values.protocol).concat(values.hostName).concat(values.versionPath).concat(endpoint[1], \"/\").concat(input, \"/\"), cb);\n            } // if the user has submitted an Array\n            // return a new promise which will resolve when all getJSON calls are ended\n            else if (typeof input === 'object') {\n                // fetch data asynchronously to be faster\n                const mappedResults = await pMap(input, mapper, {\n                  concurrency: 4\n                });\n\n                if (cb) {\n                  cb(mappedResults);\n                }\n\n                return mappedResults;\n              }\n          }\n        } catch (error) {\n          handleError(error, cb);\n        }\n      };\n    });\n    rootEndpoints.forEach(rootEndpoint => {\n      this[rootEndpoint[0]] = async (config, cb) => {\n        try {\n          configurator.setRootEndpointConfiguration(config);\n          return getJSON(\"\".concat(values.protocol).concat(values.hostName).concat(values.versionPath).concat(rootEndpoint[1], \"?limit=\").concat(values.limit, \"&offset=\").concat(values.offset), cb);\n        } catch (error) {\n          handleError(error, cb);\n        }\n      };\n    });\n  }\n\n  async resource(path, cb) {\n    let result;\n\n    try {\n      if (typeof path === 'string') {\n        result = getJSON(path);\n      } else if (typeof path === 'object') {\n        result = Promise.all(path.map(p => getJSON(p)));\n      } else {\n        throw 'String or Array required';\n      }\n\n      if (cb) {\n        cb(result);\n      }\n\n      return result;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n}\n\n;\nmodule.exports = Pokedex;","map":null,"metadata":{},"sourceType":"script"}